#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build x86 Immortalwrt with Kernel 6.12

on:
  # schedule:
    # - cron: 0 10 * * *
  repository_dispatch:
  workflow_dispatch:
    inputs:
      firewall:
        description: 'WAN口启用防火墙'
        required: false
        default: 'true'
        type: choice
        options:
          - 'false'
          - 'true'
      lan-ip:
        description: 'LAN口IP'
        required: false
        default: ''
      wan-eth:
        description: 'WAN接口'
        required: false
        default: 'eth0'
        type: choice
        options:
          - 'eth0'
          - 'eth1'
          - 'eth2'
          - 'eth3'
          - 'eth4'
          - 'eth5'
      ttyd-port:
        description: '网页终端监听端口'
        required: false
        default: '7681'
      openclash-port:
        description: 'OpenClash管理端口'
        required: false
        default: '9090'
#      wan-ip:
#        description: 'WAN口IP'
#        required: false
#        default: ''
#      wan-netmask:
#        description: 'WAN口掩码'
#        required: false
#        default: ''
#      wan-gateway:
#        description: 'WAN口网关'
#        required: false
#        default: ''
      npc-protocol:
        description: 'NPS服务端通信协议'
        required: false
        default: 'tcp'
        type: choice
        options:
          - 'tcp'
          - 'kcp'
      npc-server:
        description: 'NPS服务端地址'
        required: false
        default: ''
      npc-port:
        description: 'NPS服务端端口'
        required: false
        default: ''
      npc-vkey:
        description: 'NPS服务端密钥'
        required: false
        default: ''
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  RELEASE_PREFIX: Immortalwrt
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: x86.immortalwrt.testing.config
  DIY_P1_SH: x86-part1.sh
  DIY_P2_SH: x86-part2.sh
  DISTFEEDS: distfeeds.conf
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 初始化工作环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

      - name: 最大化可用磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: 检出项目代码
        uses: actions/checkout@main

      - name: 克隆 Immortalwrt 源码
        run: |
          df -hT $GITHUB_WORKSPACE
          echo Start cloning...
          git clone $REPO_URL -b $REPO_BRANCH immortalwrt
          echo Clone finished.

      - name: 载入自定义 Feeds
        run: |
          echo Start loading customize feeds...
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF immortalwrt/feeds.conf.default
          echo Load customize feeds finished.

      - name: 更新 Feeds
        run: |
          echo Start updating feeds...
          cd immortalwrt
          ./scripts/feeds update -a
          echo Update feeds finished.

      - name: 安装 Feeds
        run: |
          echo Start installing feeds...
          cd immortalwrt
          ./scripts/feeds install -a
          echo Install feeds finished.

      - name: 执行自定义脚本1
        run: |
          echo Start executing script...
          chmod +x $DIY_P1_SH
          cd immortalwrt 
          $GITHUB_WORKSPACE/$DIY_P1_SH
          echo Execute script finished.

      - name: 载入自定义配置
        run: |
          echo Start loading config...
          [ -e files ] && mv files immortalwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config
          echo Load config finished.

      - name: 设置初次启动脚本可执行权限
        run: |
          echo Start authorizing script...
          [ -e immortalwrt/files/etc/uci-defaults ] && chmod +x -R immortalwrt/files/etc/uci-defaults/
          [ -e immortalwrt/files/etc/uci-defaults ] && ls -l immortalwrt/files/etc/uci-defaults/
          echo Authorize script finished.

      - name: 运行自定义脚本2
        env:
          ENABLE_FIREWALL: ${{github.event.inputs.firewall}}
          LAN_IP: ${{github.event.inputs.lan-ip}}
          WAN_IP: ${{github.event.inputs.wan-ip}}
          WAN_NETMASK: ${{github.event.inputs.wan-netmask}}
          WAN_GATEWAY: ${{github.event.inputs.wan-gateway}}
          WAN_ETH: ${{github.event.inputs.wan-eth}}
          NPC_PROTOCOL: ${{github.event.inputs.npc-protocol}}
          NPC_SERVER: ${{github.event.inputs.npc-server}}
          NPC_PORT: ${{github.event.inputs.npc-port}}
          NPC_VKEY: ${{github.event.inputs.npc-vkey}}
          TTYD_PORT: ${{github.event.inputs.ttyd-port}}
          OPENCLASH_PORT: ${{github.event.inputs.openclash-port}}
        run: |
          echo Start executing script...
          chmod +x $DIY_P2_SH
          cd immortalwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          echo Execute script finished.

      - name: 下载所需文件
        id: package
        run: |
          cd immortalwrt
          echo Start downloading...
          make defconfig
          make download -j$(nproc)
          echo Download finished.

      - name: 编译固件
        id: compile
        run: |
          cd immortalwrt
          echo Start compiling...
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo Compile finished.

      - name: 检查使用空间
        if: (!cancelled())
        run: df -hT

      - name: 上传 Bin 目录
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: Immortalwrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: immortalwrt/bin
          retention-days: 30

      - name: 清理多余文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd immortalwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件目录
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: Immortalwrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
          retention-days: 30
